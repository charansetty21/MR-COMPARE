<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Mr Compare Chatbot</title>
  <style>
    #chatbot-toggle {
      position: fixed;
      bottom: 20px;
      right: 20px;
      font-size: 24px;
      padding: 10px;
      border-radius: 50%;
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
      z-index: 1000;
    }

    #chatbot {
      display: none;
      flex-direction: column;
      position: fixed;
      bottom: 80px;
      right: 20px;
      width: 300px;
      max-height: 400px;
      background-color: white;
      border: 1px solid #ccc;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0,0,0,0.2);
      z-index: 999;
    }

    #chatbot-messages {
      flex: 1;
      padding: 10px;
      overflow-y: auto;
      font-family: sans-serif;
      font-size: 14px;
      background: #f7f7f7;
    }

    #chatbot-controls {
      display: flex;
      padding: 10px;
      gap: 5px;
      background: #fff;
    }

    #chatbotText {
      flex: 1;
      padding: 6px;
    }

    #chatbot input, #chatbot button, #chatbot select {
      font-size: 14px;
    }

    #chatbot div {
      margin: 5px 0;
    }
  </style>
</head>
<body>

<script>
  const style = document.createElement('style');
  document.head.appendChild(style);

  const toggleButton = document.createElement('button');
  toggleButton.id = 'chatbot-toggle';
  toggleButton.textContent = 'üí¨';
  toggleButton.onclick = () => {
    const bot = document.getElementById('chatbot');
    bot.style.display = bot.style.display === 'none' ? 'flex' : 'none';
  };
  document.body.appendChild(toggleButton);

  const chatbot = document.createElement('div');
  chatbot.id = 'chatbot';
  chatbot.innerHTML = `
    <div id="chatbot-messages"></div>
    <div id="chatbot-controls">
      <input type="text" id="chatbotText" placeholder="Type your message..." />
      <button onclick="sendChatMessage()">‚û§</button>
      <button onclick="startVoiceInput()">üé§</button>
      <select id="language-select">
        <option value="en-IN">English</option>
        <option value="te-IN">Telugu</option>
        <option value="ta-IN">Tamil</option>
        <option value="kn-IN">Kannada</option>
      </select>
    </div>
  `;
  document.body.appendChild(chatbot);

  let chatHistory = [];

  function detectLanguage(text) {
    const teluguRegex = /[\u0C00-\u0C7F]/;
    const tamilRegex = /[\u0B80-\u0BFF]/;
    const kannadaRegex = /[\u0C80-\u0CFF]/;

    if (teluguRegex.test(text)) return 'te-IN';
    if (tamilRegex.test(text)) return 'ta-IN';
    if (kannadaRegex.test(text)) return 'kn-IN';
    return 'en-IN';
  }

  function clearChatHistory() {
    chatHistory = [];
    localStorage.removeItem('mrcompare-history');
    const messages = document.getElementById('chatbot-messages');
    messages.innerHTML = '<div>üóëÔ∏è Chat history cleared.</div>';
  }

  async function sendChatMessage(message = null) {
    const input = document.getElementById('chatbotText');
    const messages = document.getElementById('chatbot-messages');
    let lang = document.getElementById('language-select').value;
    const userMsg = message || input.value.trim();
    if (!userMsg) return;

    lang = detectLanguage(userMsg);
    document.getElementById('language-select').value = lang;
    chatHistory.push({ role: 'user', content: userMsg });

    const userBubble = document.createElement('div');
    userBubble.textContent = "üßë‚Äçüíª " + userMsg;
    messages.appendChild(userBubble);

    const botBubble = document.createElement('div');
    botBubble.textContent = "ü§ñ Mr Compare: typing...";
    messages.appendChild(botBubble);
    messages.scrollTop = messages.scrollHeight;

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer YOUR_OPENAI_API_KEY" // üîê Replace this with your real key
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: `You are Mr Compare, a helpful assistant. Respond in ${lang}` },
            ...chatHistory
          ]
        })
      });

      const data = await response.json();
      const botReply = data.choices?.[0]?.message?.content || "Sorry, I couldn't understand that.";
      botBubble.textContent = "ü§ñ Mr Compare: " + botReply;
      chatHistory.push({ role: 'assistant', content: botReply });
      speak(botReply, lang);
      localStorage.setItem('mrcompare-history', JSON.stringify(chatHistory));

      // üîÑ Send chat log to backend (optional)
      fetch('/api/saveChatLog', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat: chatHistory })
      });

    } catch (error) {
      botBubble.textContent = "ü§ñ Mr Compare: Sorry, I'm having trouble reaching the server.";
    }

    input.value = '';
    messages.scrollTop = messages.scrollHeight;
  }

  function startVoiceInput() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("Your browser doesn't support voice input.");
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = document.getElementById('language-select').value;
    recognition.start();

    recognition.onresult = function(event) {
      const transcript = event.results[0][0].transcript;
      document.getElementById('chatbotText').value = transcript;
      sendChatMessage(transcript);
    };

    recognition.onerror = function(event) {
      alert('Voice input failed: ' + event.error);
    };
  }

  function speak(text, lang) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = lang;
    window.speechSynthesis.speak(utterance);
  }

  window.addEventListener('load', () => {
    const saved = localStorage.getItem('mrcompare-history');
    if (saved) {
      chatHistory = JSON.parse(saved);
      const messages = document.getElementById('chatbot-messages');
      chatHistory.forEach(msg => {
        const bubble = document.createElement('div');
        bubble.textContent = (msg.role === 'user' ? 'üßë‚Äçüíª ' : 'ü§ñ Mr Compare: ') + msg.content;
        messages.appendChild(bubble);
      });
    }

    const clearButton = document.createElement('button');
    clearButton.textContent = 'üóëÔ∏è Clear History';
    clearButton.style.margin = '5px';
    clearButton.style.padding = '4px 8px';
    clearButton.onclick = clearChatHistory;
    document.getElementById('chatbot').prepend(clearButton);
  });
</script>

</body>
</html>
